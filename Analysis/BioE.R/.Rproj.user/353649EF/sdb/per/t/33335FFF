{
    "contents" : "#===============================================================================================================\n         ####<><><><><><><><><><><>---Wisconsin Bioenergetics Model---<><><><><><><><><><><>####\n#===============================================================================================================\n\n#Coded by Adam G. Hansen --> Updated 5-20-13.\n#Washington Cooperative Fish and Wildlife Research Unit, School of Aquatic and Fishery\n#Sciences, University of Washington, BOX: 355020, Seattle, Washington 98105.\n\n#Code follows Hanson et al. (1997).\n\n#This script has been validated against Fish Bioenergetics 3.0.\n\n#The model: Consumption = (Respiration + Active Metabolism + Specific Dynamic Action) \n#           + (Egestion + Excretion) + (Somatic Growth + Gonad Growth)\n#           C = (R + A + S) + (F + U) + (DeltaB + G)\n\n#This script is designed to fit to observed growth only, not consumption and \n#only runs simulations for an individual fish (i.e., no population \n#scaling or cohort mortality).\n\n#Input file should follow heading strucure outlined below (space-deliminted in \n#.txt file):\n\n#SimDay Temp Diet1 Diet2 Diet3 Diet4 Diet5 Diet6 Diet7 Diet8 Diet9 Diet10\n#X X X X X X X X X X X X \n#X X X X X X X X X X X X \n \n#Description of main data frame headings: Simulation day; temperature experienced \n#on each day; proportion of each diet category (1 --> 10) on each day.  \n#Must put zeros in for diet items not being used in your analysis.   \n\n#===============================================================================================================\n              #-----START OF PRIMARY FISH BIOENERGETICS FUNCTION: {RUN.FISH.BIOENERGETICS}-----#\n#===============================================================================================================\n\n#Default equations are for cool-cold water species:\n\nRUN.FISH.BIOENERGETICS <- function(DataFile,Weight.Initial=1000,Weight.Final=1100,Spawning.Day=0,Gonad.Loss=0,Con.Equation=3,\n                                   EG.EX.Equation=3, Resp.SDA.Equation=1, Pred.ED.Equation=2)\n{\n#Read in the user defined data:\nTheData <- read.table(DataFile,header=T)\n\n#Name of simulation?\nSim.Name <- \"Example\"\n\n#What species are we modeling?\nModeled.Species <- \"Coho salmon\"                      \n\n#===============================================================================================================\n                                    #-----INPUT PHYSIOLOGICAL PARAMETERS-----#\n#===============================================================================================================\n#REMEMBER: If the equation numbers selected when calling {Run.FISH.BIOENERGETICS} are not appropriate for the \n#species being modeled, this script may not run (i.e., inappropriate equations will likely be undefined for \n#some parameter values.\n\n#Consumption related parameters (user defined):\nCA <- 0.303 #Hanson et al. 1997 \nCB <- -0.275 #Hanson et al. 1997\nCQ <- 5 #Hanson et al. 1997\nCTO <- 15 #Hanson et al. 1997\nCTM <- 18 #Hanson et al. 1997\nCTL <- 26 #Willey 2004\nCK1 <- 0.42 #Willey 2004\nCK4 <- 0.03 #Willey 2004\n\nRA <- 0.0046 #White and Li 1985\nRB <- -0.217 #Hanson et al. 1997\nRQ <- 2.1 #Hanson et al. 1997\nRTO <- 18 #Brett 1952\nRTM <- 26 #Brett 1952\nRTL <- 25# Not sure this is needed for the juvenile coho function, need to determine if there is more to this\nRK1 <- 1\nRK4 <- 0.13\nACT <- 2 #Kitchell et al. 1997\nBACT <- 0.0405 #not sure\nSDA <- 0.172 #Hanson et al. 1997\nOxyConv <- 13560 #J/gram of O2 in respiration conversions (Elliot and Davidson 1975).   \n\n#Egestion and excretion parameters (user defined):\nFA <- 0.212 #Hanson et al. 1997\nFB <- -0.522 #Willey 2004\nFG <- 0.631 #Hanson et al. 1997\nUA <- 0.0214 #Willey 2004\nUB <- 0.380 #Willey 2004\nUG <- -0.299 #Hanson et al. 1997\n\n#Predator energy densities for EQUATION 1 (user defined):\nPredator.Energy <- 5000\n\n#Predator energy densities for EQUATION 2 (user defined):\nAlphaI <- 4111\nBetaI <- 155\nThresh <- 10\nAlphaII <- 7602\nBetaII <- 0.5266 \n\n\n#Prey energy densities: script can handle TEN diet items.  Must put ZERO's in \n#for diet slots not being used, otherwise sript won't run.  These slots must \n#line up with diet proportion columns outlined in the input data file.\nPrey1 <- 2746 \nPrey2 <- 4272 \nPrey3 <- 3076 \nPrey4 <- 2789 \nPrey5 <- 4225 \nPrey6 <- 6387\nPrey7 <- 5134\nPrey8 <- 0\nPrey9 <- 0\nPrey10 <- 0\n\n#Prey indigestibilites in terms of proportions of prey: make sure prey \n#proportions/densities correspond (values should be < 1). \nIndPrey1 <- 0.15\nIndPrey2 <- 0.15\nIndPrey3 <- 0.15\nIndPrey4 <- 0.15\nIndPrey5 <- 0.15\nIndPrey6 <- 0.15\nIndPrey7 <- 0.15\nIndPrey8 <- 0\nIndPrey9 <- 0\nIndPrey10 <- 0\n\n#Consumer inputs (grams):\nWeight0 <- Weight.Initial #Intial consumer weight.\nWeightF <- Weight.Final   #Final weight of consumer after simulation period.\nGonad.Loss <- Gonad.Loss  #As a proportion of fish body mass.  \n                   \nGonad.Loss.Day <- Spawning.Day   #Day of simulation that corresponds to spawning and gamete \n                                 #loss. Use zero in inital function call if simulation period does \n                                 #not include spawning. Modeled such that gamete release occurs after \n                                 #growth on this day.\n\n#===============================================================================================================\n#FUNCTION NUMBER 1: {Bioenergetics}          \n\n#Runs bioenergetics model for a single day in a given simulation and spits out\n#vector of bioenergetics quantities --> Used for fitting the p-value and for\n#generating consumption once p-value has been fit --> For looping below.\n#===============================================================================================================\n\n#\"i\" is a row in the input data file, \"WO\" is the consumer weight, and \"P\" is an arbitrary\n#p-value that will eventually be fitted to observed growth using this function.\n\nBioenergetics <- function(i,W0,P)    \n{  \n  \n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n        #-----CONSUMPTION: Choice among 3 temperature dependent functions [f(t)] for CONSUMPTION-----# \n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n\n#Exponential---useful when temperatures are always below physiological optimum for species:  \nif (Con.Equation == 1) {ft.con <- exp(CQ*TheData$Temp[i])}\n\n#Warm-water species:\nif (Con.Equation == 2) {\n                        V.con <- (CTM-TheData$Temp[i])/(CTM-CTO) \n                        Z.con <- log(CQ)*(CTM-CTO)  \n                        Y.con <- log(CQ)*(CTM-CTO+2)\n                        X.con <- (Z.con^2*(1+(1+40/Y.con)^0.5)^2)/400\n                        ft.con <- (V.con^X.con)*exp(X.con*(1-V.con)) \n                        } \n\n#Cool and cold-water species:\nif (Con.Equation == 3) {\n                        G1 <- (1/(CTO-CQ))*log((0.98*(1-CK1))/(CK1*0.02))   \n                        G2 <- (1/(CTL-CTM))*log((0.98*(1-CK4))/(CK4*0.02)) \n                        L1 <- (exp(G1*(TheData$Temp[i]-CQ)))\n                        L2 <- (exp(G2*(CTL-TheData$Temp[i]))) \n                        KA <- (CK1*L1)/(1+CK1*(L1 - 1)) \n                        KB <- (CK4*L2)/(1+CK4*(L2 - 1))\n                        ft.con <- (KA*KB)\n                        }\n\n  Consumption <- (CA*W0^CB)*P*ft.con #Units --> Specific (g/g/d).\n\n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n          #-----EGESTION (solid) and EXCRETION (nitrogenous): Choice among 3 waste loss functions-----# \n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n\n#Both types of waste loss are simply a constant fraction of consumption: \nif (EG.EX.Equation == 1) {\n                          Egestion <- FA*Consumption \n                          Excretion <- UA*(Consumption-Egestion)\n                          } \n\n#Waste loss is dependent on mass, temperature, and ration:\nif (EG.EX.Equation == 2) {\n                          Egestion <- FA*(TheData$Temp[i]^FB)*exp(FG*P)*Consumption\n                          Excretion <- UA*(TheData$Temp[i]^UB)*exp(UG*P)*(Consumption-Egestion)\n                          }\n\n#Similar to equation 2, but with correction for indigestible prey (PFF):\nif (EG.EX.Equation == 3) {\n                          PFF <-((IndPrey1*TheData$Diet1[i])+ (\n                                  IndPrey2*TheData$Diet2[i])+ (\n                                  IndPrey3*TheData$Diet3[i])+ (\n                                  IndPrey4*TheData$Diet4[i])+ (\n                                  IndPrey5*TheData$Diet5[i])+ (\n                                  IndPrey6*TheData$Diet6[i])+ (\n                                  IndPrey7*TheData$Diet7[i])+ (\n                                  IndPrey8*TheData$Diet8[i])+ (\n                                  IndPrey9*TheData$Diet9[i])+ (  \n                                  IndPrey10*TheData$Diet10[i]))\n                          PE <- FA*(TheData$Temp[i]^FB)*exp(FG*P) \n                          PF <- ((PE-0.1)/0.9)*(1-PFF)+PFF\n                          Egestion <- PF*Consumption\n                          Excretion <- UA*(TheData$Temp[i]^UB)*exp(UG*P)*(Consumption-Egestion)\n                          }\n\n                          #Units --> Specific (g/g/d).\n\n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n                  #-----RESPIRATION and SDA: Choice between 2 functions for RESPIRATION-----# \n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n\n#Exponential with swimming speed--dependent on mass and water temperature below a cuttoff (RTL):\nif (Resp.SDA.Equation == 1) {\n                             ifelse(TheData$Temp[i] > RTL, VEL <- RK1*W0^RK4, VEL <- ACT*(W0^RK4)*exp(BACT*TheData$Temp[i]))\n                             ft.metabolism <- exp(RQ*TheData$Temp[i])\n    \t                       ACTIVITY <- exp(RTO*VEL)                           \n                             } \n\n#Temperature dependent with activity multiplier:\nif (Resp.SDA.Equation == 2) {\n                             V.resp <- (RTM-TheData$Temp[i])/(RTM-RTO) \n                             Z.resp <- log(RQ)*(RTM-RTO)  \n                             Y.resp <- log(RQ)*(RTM-RTO+2)\n                             X.resp <- (Z.resp^2*(1+(1+40/Y.resp)^0.5)^2)/400 \n                             ft.metabolism <- (V.resp^X.resp)*exp(X.resp*(1-V.resp))\n                             ACTIVITY <- ACT                          \n                             }\n         \n  Respiration <- RA*(W0^RB)*ft.metabolism*ACTIVITY #Units --> Specific (g O2/g/d). \n  \n  SDAction <- SDA*(Consumption-Egestion) #Units --> Specific (g/g/d) \n \n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n                          #-----PREDATOR ENERGY (J/g): Choice between 2 Equations-----# \n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> \n\nif (Pred.ED.Equation == 1) {Pred.Energy <- Predator.Energy}\n                           \nif (Pred.ED.Equation == 2 & W0 < Thresh) {Pred.Energy <- AlphaI+(BetaI*W0)}\n\nif (Pred.ED.Equation == 2 & W0 >= Thresh) {Pred.Energy <- AlphaII+(BetaII*W0)}\n\n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n                   #-----Convert grams to joules and calculate GROWTH for simulation day i-----# \n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n\n Growth <-           ((((Consumption)*((\n                                  Prey1*TheData$Diet1[i])+ (\n                                  Prey2*TheData$Diet2[i])+ (\n                                  Prey3*TheData$Diet3[i])+ (\n                                  Prey4*TheData$Diet4[i])+ (\n                                  Prey5*TheData$Diet5[i])+ (\n                                  Prey6*TheData$Diet6[i])+ (\n                                  Prey7*TheData$Diet7[i])+ (\n                                  Prey8*TheData$Diet8[i])+ (\n                                  Prey9*TheData$Diet9[i])+ (  \n                                  Prey10*TheData$Diet10[i])))-(\n                      (Egestion+Excretion+SDAction)*((\n                                  Prey1*TheData$Diet1[i])+ (\n                                  Prey2*TheData$Diet2[i])+ (\n                                  Prey3*TheData$Diet3[i])+ (\n                                  Prey4*TheData$Diet4[i])+ (\n                                  Prey5*TheData$Diet5[i])+ (\n                                  Prey6*TheData$Diet6[i])+ (\n                                  Prey7*TheData$Diet7[i])+ (\n                                  Prey8*TheData$Diet8[i])+ (\n                                  Prey9*TheData$Diet9[i])+ (  \n                                  Prey10*TheData$Diet10[i])) + (Respiration*OxyConv)))/Pred.Energy)*W0    #In terms of daily weight gain (g/day).\n                                                                                                          #Divide this value by W0 to get back \n                                                                                                          #to a specific rate (g/g/d).\n\n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n          #-----Update GROWTH if spawning occured and return vector of bioenergetics quantities-----# \n#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n \n Consumption.Specific <- Consumption #Units --> g/g/d\n Consumption.total <- Consumption.Specific*W0 #Units --> g/d\n          \n #If spawning occured: need to update total growth on spawning day:\n if (i == Gonad.Loss.Day & Gonad.Loss > 0)          \n {Growth <- Growth-(Gonad.Loss*(Growth+W0))} \n else\n {Growth <- Growth} #Units --> g       \n          \n Growth.Specific <- Growth/W0 #Units --> g/g/d\n\n #Weight of fish at end of simulation day:\n Weight.End <- Growth+W0 #Units --> g   \n\n #Egestion, Excretion, Respiration, and SDA are in specific terms.\n          \n #Return a vector of all bionergetics quantities from the days simulation: \n return(c(Growth,Growth.Specific,Weight.End,Consumption.total,Consumption.Specific,\n          Egestion,Excretion,Respiration,SDAction))\n}\n\n#===============================================================================================================\n                                      #---End of FUNCTION NUMBER 1---#\n#===============================================================================================================\n\n#===============================================================================================================\n#FUNCTION NUMBER 2: {FIT.PVALUE}\n\n#Primary function that computes the deviation between observed and estimated growth based on some defined P-value. \n#This function will be optimized below (i.e., P-value that makes function output equal zero).        \n#===============================================================================================================\n\nFIT.PVALUE <- function(P)\n{                \nP1 <- P[1]\n                                                                                                                    \n #Matrix of zeros to fill with bioenergetics quantities once looping is initiated.\n Results <- matrix(0,ncol=9,nrow=(length(TheData$SimDay))) \n\n #Need a starting point to intitiate looping --> compute bioenergetics quantities for simulation day 1: \n Results[1,] <- Bioenergetics (1,Weight0,P1)\n\n #Loop through data for every day of simulation period defined by length of input .txt file.\n #Growth accruing from previous days are continuously added to the consumers weight throughout \n #the simulation period.\n for (i in 2:length(TheData$SimDay))\n {\n Results[i,] <- Bioenergetics (i,Results[i-1,3],P1)\n }\n\n #How much did the fish grow over the course of the simulation period? \n G.total <- sum(Results[,1])\n \n #Total observed growth:\n Total.Growth <- WeightF-Weight0\n \n #Return the deviation between observed and predicted growth.  The following accounts for all \n #possible growth responses (i.e., posotive, negative, static).  This quantity will be minimized\n #once the optimization routine below is called.\n return(abs(G.total-Total.Growth))\n}\n\n#===============================================================================================================\n                                        #---End of FUNCTION NUMBER 2---#\n#===============================================================================================================\n\n#===============================================================================================================\n#FUNCTION NUMBER 3: {GET.CONSUMPTION}\n\n#Repeat simulations, extract total consumption, and split consumption into individual diet components using best\n#fit P-value (P1):\n#===============================================================================================================\n\nGET.CONSUMPTION <- function (P1)\n{  \n\n #Matrix of zeros to fill with bioenergetics quantities once looping is initiated.\n Results <- matrix(0,ncol=9,nrow=(length(TheData$SimDay)))\n\n #Need a starting point to intitiate looping --> compute bioenergetics quantities for simulation day 1: \n Results[1,] <- Bioenergetics (1,Weight0,P1)\n\n #Loop through data for every day of simulation period defined by length of input .txt file.\n #Growth accruing from previous days are continuously added to the consumers weight throughout \n #the simulation period.\n for (i in 2:length(TheData$SimDay))\n {\n Results[i,] <- Bioenergetics (i,Results[i-1,3],P1) \n }\n\n#===============================================================================================================\n                                #-----BUILD TABLE OF KEY RESULTS FOR USER-----#\n#===============================================================================================================\n \n #How many days were in the simulation period? \n Day <- data.frame(seq(1,length(TheData$SimDay),by=1)) #Units --> days\n\n #How much prey did the fish consume in total on every day of simulation(summed across diet items)? \n Daily.Total.Con <- Results[,4] #Units --> g/day\n\n #Partition total daily consumption into different diet items based on diet proportions specified \n #by the user: \n Daily.Total.Con.Diet1 <- Daily.Total.Con*TheData$Diet1 #Units --> g/day\n Daily.Total.Con.Diet2 <- Daily.Total.Con*TheData$Diet2 #Units --> g/day\n Daily.Total.Con.Diet3 <- Daily.Total.Con*TheData$Diet3 #Units --> g/day\n Daily.Total.Con.Diet4 <- Daily.Total.Con*TheData$Diet4 #Units --> g/day\n Daily.Total.Con.Diet5 <- Daily.Total.Con*TheData$Diet5 #Units --> g/day\n Daily.Total.Con.Diet6 <- Daily.Total.Con*TheData$Diet6 #Units --> g/day\n Daily.Total.Con.Diet7 <- Daily.Total.Con*TheData$Diet7 #Units --> g/day\n Daily.Total.Con.Diet8 <- Daily.Total.Con*TheData$Diet8 #Units --> g/day\n Daily.Total.Con.Diet9 <- Daily.Total.Con*TheData$Diet9 #Units --> g/day\n Daily.Total.Con.Diet10 <- Daily.Total.Con*TheData$Diet10 #Units --> g/day\n\n #Combine consumption of all diet items into a new data frame: \n All.Diet <- data.frame (cbind(Daily.Total.Con.Diet1,\n                        Daily.Total.Con.Diet2, \n                        Daily.Total.Con.Diet3, \n                        Daily.Total.Con.Diet4, \n                        Daily.Total.Con.Diet5, \n                        Daily.Total.Con.Diet6, \n                        Daily.Total.Con.Diet7, \n                        Daily.Total.Con.Diet8, \n                        Daily.Total.Con.Diet9, \n                        Daily.Total.Con.Diet10)) \n\n #How much did the fish weigh at the end of each simulation day?\n Daily.Weight <- Results[,3] #Units --> g\n \n #How much did the fish grow on every day of the simulation? \n Daily.Weight.Gain <- Results[,1] #Units --> g/day\n\n #Determine which diet items to include in output summary table (i.e., which\n #of the ten possible slots were actually used by the user?)\n Diet.Check <- rep(0,12) \n\n for (i in 3:12)\n {\n Diet.Check[i] <- if (sum(TheData[,i])>0)\n                 {1}\n                 else\n                 {0}\n }\n\n Include.Diet <- matrix(0,ncol=sum(Diet.Check),nrow=length(TheData$SimDay))\n \n for (i in 1:sum(Diet.Check))\n {\n Include.Diet[,i] <- All.Diet[,i]   \n }\n\n #Combine all these lists of quanitites together into a streamlined output table to return to the user: \n Output <- cbind(Day, Include.Diet,                            \n                      Daily.Total.Con,\n                      Daily.Weight.Gain,\n                      Daily.Weight)\n                            \n #Give each column of the output table a meaningful name: \n colnames(Output) <- c(\"Sim.Day\",\n                      if ((TheData$Diet1[1])>0){\"D1.Con.(g/d)\"},\n                      if ((TheData$Diet2[1])>0){\"D2.Con.(g/d)\"},\n                      if ((TheData$Diet3[1])>0){\"D3.Con.(g/d)\"},\n                      if ((TheData$Diet4[1])>0){\"D4.Con.(g/d)\"},\n                      if ((TheData$Diet5[1])>0){\"D5.Con.(g/d)\"},\n                      if ((TheData$Diet6[1])>0){\"D6.Con.(g/d)\"},\n                      if ((TheData$Diet7[1])>0){\"D7.Con.(g/d)\"},\n                      if ((TheData$Diet8[1])>0){\"D8.Con.(g/d)\"},\n                      if ((TheData$Diet9[1])>0){\"D9.Con.(g/d)\"},\n                      if ((TheData$Diet10[1])>0){\"D10.Con.(g/d)\"},\n                      \"Total.Con.(g/d)\",\n                      \"W.Gain.(g/d)\",\n                      \"Daily.Weight.(g)\")                      \n return (Output)   \n}\n\n#===============================================================================================================\n                                       #---End of FUNCTION NUMBER 3---#\n#===============================================================================================================\n\n#===============================================================================================================\n#FUNCTION NUMBER 4 (starts at top of script --> {RUN_FISH_BIOENERGETICS}):\n\n#Function based on input file that returns consumption resulting from user Specifications. For those unfamiliar \n#with R, use the following commands --> load functions written in this script into R by running the command: \n\n#source(\"C:\\\\fishbioenergetics.r\") \n\n#in the R console.  THE SCRIPT MUST BE PLACED ON LOCAL DISK (C:) FOR THIS COMMAND TO WORK. This command only \n#needs to be run once every time R is opened.\n\n#To run the model given what has been outlined in the .txt input file which must be named 'bio_input_data.txt' \n#and also placed on Local Disk (C:), type the command with user defined start & end weights, spawning day, and \n#gonad loss:\n\n#RUN.FISH.BIOENERGETICS(\"C:\\\\bio_input_data.txt\",Weight.Initial, Weight.Final, Spawning.Day, Gonad.Loss)\n\n#Consumption output will be printed to the R console.  Cut and paste into Excel, manipulate further in R, or\n#save as a .csv file to working directory using the \"Write\" funciton.\n#===============================================================================================================\n\n #Fit the p-value.  An upper limit of 2.0 is set for the P-value. \n Pvalue.Opt <- optimize(f=FIT.PVALUE,lower=0,upper=2,tol=0.0000001) \n\n #Extract the fitted p-value: \n Best.Pvalue <- data.frame(Pvalue.Opt[1])\n\n #What is the quantity of the function FIT.PVALUE that corresponds  \n #with the optimal P-value? \n Objective <- data.frame(Pvalue.Opt[2])\n \n #Use the best P-value and model consumption: \n Results.Final <- GET.CONSUMPTION(Best.Pvalue[1,1]) \n\n #Print some important information for the user at the top of the output table: \n print (\"Name of Simulation\")\n print (Sim.Name)\n print(\"----------------------------\")\n print (\"Modeled Species\")\n print (Modeled.Species)\n print(\"----------------------------\")\n print (\"Initial Weight\")\n print (Weight0) \n print(\"----------------------------\")\n print (\"Final Weight\")                                         \n print (WeightF)\n print(\"----------------------------\") \n print (\"Best fit P-value\")\n print (Best.Pvalue[1,1]) \n print(\"----------------------------\")\n print(\"Value of the function FIT.PVALUE coresponding to optimal P\")\n print (Objective[1,1])\n print(\"<><><><><><><><><><><><><><><>\")\n print(\"Results of Simulation\") \n print(\"<><><><><><><><><><><><><><><>\")\n\n #Return the final results to the user: \n return (Results.Final)\n}\n\n#===============================================================================================================\n                                         #---End of FUNCTION NUMBER 4---#\n#===============================================================================================================\n\n#TheData <- read.table(\"C:/Users/Adam/Desktop/bio_input_data.txt\",header=T)\n\n#A useful way to save your simulation is to use the {write.csv} function, which will save the results returned from\n#the function {RUN.FISH.BIOENERGETICS} as a .csv file to your working directory.  To do this, you must name your \n#simulation as an object.  The example below names the simulation \"Sim.1\", and the output file \n#\"Bioenergetics results.csv\":\nfiles.church <- list.files(path=\"Input files for BioE/Church/\", pattern=\"*.txt\", full.names=T, recursive=FALSE)\nfiles\n\nfor( i in 1:10){\n  Sim.1 <- RUN.FISH.BIOENERGETICS(as.character(files.church[i,1]), Weight.Initial=.2, \n                                  Weight.Final=files.church[i,2], Spawning.Day=0, Gonad.Loss=0, Con.Equation=3, \n                                  EG.EX.Equation=3, Resp.SDA.Equation=2, Pred.ED.Equation=2) \n}\nfiles.church<-as.data.frame(files.church)\nfiles.church[,2]<-c(1:10)\n\n\n#Easiest to set your working directory to where the source code is stored. Simple to set the working directory  \n#in R-Studio---On main menue---Session-->Set Working Directory--->To Source File Location. \nwrite.csv(x=Sim.1, file=\"19ASW9.csv\")\n\nfiles <- list.files(path=\"path/to/dir\", pattern=\"*.txt\", full.names=T, recursive=FALSE)\nlapply(files, function(x) {\n  t <- read.table(x, header=T) # load file\n  # apply function\n  out <- function(t)\n    # write to file\n    write.table(out, \"path/to/output\", sep=\"\\t\", quote=F, row.names=F, col.names=T)\n})\n",
    "created" : 1472587754336.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2084209674",
    "id" : "33335FFF",
    "lastKnownWriteTime" : 1480007493,
    "path" : "~/Documents/Current Projects/BioE.R/Input files for BioE/Coulter/fishbioenergetics.r",
    "project_path" : "Input files for BioE/Coulter/fishbioenergetics.r",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}